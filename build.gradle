buildscript {

    ext {
        //use + for latest
        appName = 'Ore Infinium'

        gdxVersion = '1.9.2'

        aiVersion = '1.8.0'

        artemisVersion = '1.4.0'
        artemisContribVersion = '1.1.0'
        kryonetVersion = '2.22.0-RC1'

        matrixCliVersion = "0.1.2"

        jcommanderVersion = "1.48"
        tweenEngineVersion = "6.3.3"

        kotlinVersion = '1.0.2'

        junitVersion = '4.12'
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }

        jcenter()

        maven { url "http://sreich.net:8081/nexus/content/repositories/thirdparty/" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap/" }
    }

    dependencies {
        // lib for artemis-odb weaving.
        // see https://github.com/junkdog/artemis-odb/wiki/Bytecode-weaving
        classpath "net.onedaybeard.artemis:artemis-odb-gradle-plugin:$artemisVersion"

        // introduces support for provided scope gradle keyword.
        //3.0.3 FIXME
        //classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$gradleExtraConfigurationsPluginVersion"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

    }
}

plugins {
    id 'nebula.provided-base' version '3.1.0'
    id 'org.sonarqube' version '1.1'

    //for extracting git sha at deploy time
    id "org.ajoberstar.grgit" version "1.4.2"

    //run :dependencyUpdates to get a list of updates needed
    id "com.github.ben-manes.versions" version "0.12.0"
}


task wrapper(type: Wrapper) {
    gradleVersion = "2.13"
}

allprojects {

    apply plugin: "java"
    apply plugin: "kotlin"

    compileJava {
        sourceCompatibility = '1.8'
    }

    apply plugin: "eclipse"

    configurations.all {
        resolutionStrategy {
            // failOnVersionConflict()
        }
        resolutionStrategy.force "net.onedaybeard.artemis:artemis-odb:$artemisVersion"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }

        //only for kryonet. it is not uploaded to maven central, or another repo hoster
        maven { url "http://sreich.net:8081/nexus/content/repositories/thirdparty/" }

        maven { url "https://dl.bintray.com/kotlin/kotlin-eap/" }
    }

    apply plugin: "idea"

    idea {
        project {
  //          jdkName = '1.8'
//            downloadSources = true
        }
 //           downloadJavadoc = true
    }

}

project(":desktop") {
    apply plugin: "java"

    dependencies {

        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"


//        compile 'com.flowpowered:flow-noise:1.0.0'

    }
}

project(":core") {
    apply plugin: "java"

    configurations {
        provided
    }

    sourceSets {
        // run the annotation processor compile time.
        main {
            compileClasspath += [configurations.provided]
        }
    }

    dependencies {
        // kotlin
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"


        // libgdx core
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"

        //libgdx addons
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-ai:$aiVersion"

        //junit
        testCompile "junit:junit:$junitVersion"
        testCompile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

        // kryonet
        compile "com.esotericsoftware:kryonet:$kryonetVersion"

        //artemis-odb
        compile "net.onedaybeard.artemis:artemis-odb:$artemisVersion"

        // Artemis-odb annotation processor (see https://github.com/junkdog/artemis-odb/wiki/EntityFactory)
        provided "net.onedaybeard.artemis:artemis-odb-processor:$artemisVersion"

        // Artemis-odb bonus functionality (systems, events, components).

        compile "net.mostlyoriginal.artemis-odb:contrib-core:$artemisContribVersion"
        compile "net.mostlyoriginal.artemis-odb:contrib-jam:$artemisContribVersion"
        compile "net.mostlyoriginal.artemis-odb:contrib-eventbus:$artemisContribVersion"
        compile "net.mostlyoriginal.artemis-odb:contrib-plugin-operations:$artemisContribVersion"

        //compile "net.mostlyoriginal.artemis-odb:contrib-plugin-profiler:$artemisContribVersion"

        // jcommander for command line parsing
        compile "com.beust:jcommander:$jcommanderVersion"
        //junit
        testCompile "junit:junit:$junitVersion"

        //universal tween engine
        compile "org.sreich:tween-engine-api:$tweenEngineVersion"

        compile 'com.sudoplay.joise:joise:1.0.1'
    }
}

project(":matrix") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "net.onedaybeard.ecs:matrix-cli:$matrixCliVersion"
    }

    task generateMatrix(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'com.artemis.cli.CliApplication'
        args '-c', "$rootProject.projectDir/core/build/classes/main/", '-l', "$rootProject.ext.appName"
    }
    build.finalizedBy generateMatrix
}

tasks.eclipse.doLast {
    delete ".project"
}

