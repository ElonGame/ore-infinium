apply plugin: "java"
apply plugin: "artemis"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "com.ore.infinium.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");
//modifications for artemis Weaving. see https://github.com/junkdog/artemis-odb/wiki/Weaving-LibGDX
project.ext.weaveDir = new File("$buildDir/explodedForWeave")

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

def getDate() {
    def date = new Date()

    def formattedDate = date.format("yyyy-MM-dd-'time'-HH-mm_ss");
    return formattedDate
}

version = '0.1-build-' + getDate()

/**
 * move all old output jars into desktop/libs/old, so the latest
 * one is always in desktop/libs/<here>
 * @return
 */
def moveOldFiles() {
    def libPath = project.buildDir.getPath() + '/libs'
    mkdir(libPath + '/old');

    File libPathDir = file(libPath);

    //    libPathDir.listFiles();
    libPathDir.listFiles().each {
        if (!it.isDirectory()) {
            def newPath = libPath + '/old/' + it.name;
            print(newPath);
            it.renameTo(newPath);
        }
    }

    //todo Files.createSymbolicLink() create symlink to LATEST?
}

task dist(type: Jar) {
    moveOldFiles();

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir);

    baseName = 'ore-infinium';

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: 'assets']);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}
